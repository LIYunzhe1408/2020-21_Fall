/********************************************************************
描述
给出一个正整数a，要求分解成若干个正整数的乘积，即a=a1?a2?a3?...?an，并且1<a1≤a2≤a3≤...≤an，问这样的分解的种数有多少。注意到a=a也是一种分解

输入
第1行是测试数据的组数n，后面跟着n行输入。每组测试数据占1行，包括一个正整数a (1<a<32768)
输出
n行，每行输出对应一个输入。输出应是一个正整数，指明满足要求的分解的种数

样例输入1
2
2
20
样例输出1
1
4
****************************************************************************/ 
//调试建议：查看i, j , k。利于看出递归思想。 
#include<iostream>
#include <cmath> 
using namespace std;
int j;
int f(int m, int k); 


 
int main() {
	int n;
	cin >> n;
	while(n--){
	    j = 1;
		int a;

		cin >> a;
		f(2, a);
		cout << j << endl;
	}
	return 0 ;
}

// 拆分整数，拆分到不能再拆后（平方也要再拆）每找到一个因数则j + 1 ,直到最后一个因数i，最后得到k/i= 1，结束函数。 
int f(int m, int k) {

	for( int i = 2; i <= k / i ; i++) { 
	// i <= n / i 是怎么想到的 -> 如果n = i^2,那么n可以继续分解，大于的情况就继续考量n%i的值 
		if(k % i == 0){ //若可以整除，那么就进行分解， 
			j++;  //找到一个因数 j + 1 
			f(i, k/i);	// 递归再次使用自身函数，使n/i作为n进行计算 .递归中for每一个不符合的值便会return0，直到最外一层，再i++ 
		}
		}
	return 0;
}
